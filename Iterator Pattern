import java.util.*;

class Waitress {
	/*Menu d;
	Menu p;*/
	
	ArrayList<Menu> menus;
	
	Waitress(ArrayList<Menu> menus) {
		this.menus = menus;
	}
	
/*	Waitress(Menu d, Menu p) {
		this.d = d;
		this.p = p;
	} */
	
	void print(Iterator i) {
		while (i.hasNext()) {
			System.out.println(i.next());
		}
	}
	
	void printMenu() {
		Iterator<?> menuIterator = menus.iterator();
		while (menuIterator.hasNext()) {
			Menu menu = (Menu)menuIterator.next();
			Iterator i = menu.createIterator();
			print(i);
		}
/*		Iterator i1 = d.createIterator();
		print(i1);
		Iterator i2 = p.createIterator();
		print(i2);*/
		/*
		String m1 = d.getMenuItems();
		for (int i = 0; i < d.n; i++) {
			System.out.println(m1[i]);
		}
		ArrayList<String> m2 = p.getMenuItems();
		for (int i = 0; i < m2.size(); i++) {
			System.out.println(m2.get(i));
		}*/
	}
	
}

interface Menu {
	public Iterator createIterator();
}

/*
interface Iterator {
	boolean hasNext();
	String next();
} */

class DinerMenuIterator implements Iterator {
	String[] items;
	int position = 0;
	
	public DinerMenuIterator(String[] items) {
		this.items = items;
	}
	
	public String next() {
		String menuItem = items[position];
		position = position + 1;
		return menuItem;
	}
	
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
	
	public void remove() {
		if (position <= 0) {
			throw new IllegalStateException("You can't remove an item until you've done at least one");
		}
		if (items[position-1] != null) {
			for (int i = position-1; i < (items.length-1); i++) {
				items[i] = items[i+1];
			}
			items[items.length-1] = null;
		}
	}
	
}

/*
class PancakeHouseMenuIterator implements Iterator {
	List<String> items;
	int position = 0;
	
	public PancakeHouseMenuIterator(List<String> items) {
		this.items = items;
	}
	
	public String next() {
		String item = items.get(position);
		position = position + 1;
		return item;
	}
	
	public boolean hasNext() {
		if (position >= items.size()) {
			return false;
		} else {
			return true;
		}
	}
	
}*/

class DinerMenu implements Menu {
	
	static int MAX = 10;
	int n = 0;
	String[] menuItems;
	DinerMenu() {
		menuItems = new String[MAX];
		menuItems[n++] = "짜장";
		menuItems[n++] = "짬뽕";
		menuItems[n++] = "우동";
		menuItems[n++] = "라면";
	}
	/*
	String[] getMenuItems() {
		return menuItems;
	} */
	
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);
	}
	
}

class PancakeHouseMenu implements Menu {
	
	ArrayList<String> menuItems;
	
	PancakeHouseMenu() {
		menuItems = new ArrayList<String>();
		
		menuItems.add("AAA 팬케익");
		menuItems.add("BBB 팬케익");
		menuItems.add("CCC 팬케익");
		menuItems.add("DDD 팬케익");
		menuItems.add("EEE 팬케익");		
	}
	
	/*
	ArrayList<String> getMenuItems() {
		return menuItems;
	} */
	
	public Iterator createIterator() {
		return menuItems.iterator();
		//return new PancakeHouseMenuIterator(menuItems);
	}
	
}

class CafeMenu implements Menu{
	HashMap<Integer, String> menuItems = new HashMap<Integer, String> ();
	
	CafeMenu() {
		menuItems.put(1, "커피");
		menuItems.put(2, "홍차");
		menuItems.put(3, "우유");
	}
	
	HashMap<Integer, String> getMenuItems() {
		return menuItems;
	}
	
	public Iterator createIterator() {
		return menuItems.values().iterator();
	}
	
}

public class MenuTestDrive {

	public static void main(String[] args) {

		DinerMenu x = new DinerMenu();
		PancakeHouseMenu y = new PancakeHouseMenu();
		CafeMenu z = new CafeMenu();
		
		ArrayList<Menu> menus = new ArrayList<Menu>();
		menus.add(x);
		menus.add(y);
		menus.add(z);
		
		Waitress w = new Waitress(menus);
		w.printMenu();
		
	}

}
